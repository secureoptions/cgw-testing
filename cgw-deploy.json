{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Launches a test Strongswan CGW. Support dynamic or static VPNs",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "Configuration Details"
					},
					"Parameters": ["Type", "SshKey", "SshSource", "VpcCidr", "SubnetCidr", "Asn", "Vgws", "IkeVersion", "IkeParameters", "IkeLifetime", "EspParameters", "EspLifetime", "Margin", "Fuzz" ]
				}],

			"ParameterLabels": {
				"Type": {
					"default": "Strongswan EC2 type"
				},
				"SshKey": {
					"default": "Private Key for SSH"
				},
				"SshSource": {
					"default": "Source IP/net for SSH"
				},
				"VpcCidr": {
					"default": "VPC CIDR"
				},
				"SubnetCidr": {
					"default": "Subnet CIDR"
				},
				"Asn": {
					"default": "CGW's BGP ASN"
				},
				"Vgws": {
					"default": "VGWs/TGWs & Routing"
				},
				"IkeVersion": {
					"default": "IKE Version"
				},
				"IkeParameters": {
					"default": "IKE Parameters"
				},
				"IkeLifetime": {
					"default": "IKE Lifetime"
				},
				"EspParameters": {
					"default": "IPSEC Parameters"
				},
				"EspLifetime": {
					"default": "IPSEC Lifetime"
				},
				"Margin": {
					"default": "Soft-lifetime"
				},
				"Fuzz": {
					"default": "Rekey Fuzz"
				}
					
			}

		}
	},
	
	"Parameters":{
		"Type":{
			"Description": "The instance type that you want to launch Strongswan CGW as.",
			"Type":"String",
			"AllowedValues": ["t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.12xlarge", "m5.24xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.18xlarge", "x1e.32xlarge", "x1e.16xlarge", "x1e.8xlarge", "x1e.4xlarge", "x1e.2xlarge", "x1e.xlarge", "x1.32xlarge", "x1.16xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "f1.2xlarge", "f1.16xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "h1.2xlarge", "h1.4xlarge", "h1.8xlarge", "h1.16xlarge"],
			"Default": "t2.micro"
			},
		"VpcCidr":{
			"Description": "The VPC CIDR that you want to launch your CGW in.",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "10.15.0.0/16",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid VPC CIDR range of the form x.x.x.x/x."
			},
		"SubnetCidr":{
			"Description": "The Subnet that you want to launch your CGW in. This must be within the VPC CIDR range you chose",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "10.15.0.0/24",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid subnet range of the form x.x.x.x/x."
			},
		"SshKey":{
			"Description": "The private key to use so you can SSH into your CGW.",
			"Type": "AWS::EC2::KeyPair::KeyName"
			},
		"SshSource":{
			"Description": "The source IP you intend to SSH from when accessing the CGW.",
			"Type": "String",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP to SSH from in form of x.x.x.x/32."
		},
		"Asn":{
			"Description": "The BGP ASN of the CGW",
			"Type": "String",
			"Default": "65000"
			},
		"Vgws":{
			"Description": "Specify the VGW or TGW that you want to create a VPN with. Then specify type of VPN it should be (separated by comma). For BGP use 'dynamic', if it is a static VPN use the remote CIDR as the type. You can also create multiple VPN by separating the VGW/TGW with commas as seen in the displayed example",
			"Type":"String",
			"Default": "tgw-xxxxxxxx,dynamic,vgw-yyyyyyyy,192.168.0.0/16",
			"AllowedPattern": "([v|t]gw-[a-zA-Z0-9]{8,17},(dynamic|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})),?)*",
			"ConstraintDescription": "must be in the form 'vgw-xxxxxxxx,dynamic' or 'vgw-xxxxxxxx,10.0.0.0/16'"
			},
		"IkeVersion":{
			"Description": "IKE version to use (ikev1 or ikev2)",
			"Type": "String",
			"Default": "ikev1"
			},
		"IkeLifetime": {
			"Description": "IKE lifetime. You can define it in days (d), hours (h), minutes (m), seconds (s)",
			"Type": "String",
			"Default": "8h"
			},
		"IkeParameters": {
			"Description": "IKE encryption, integrity, dh group. Specify in form <enc>-<integ>-<dhgroup>!",
			"Type": "String",
			"Default": "aes128-sha1-modp1024!"
			},
		"EspParameters": {
			"Description": "IPSEC encryption, integrity, PFS dh group. Specify in form <enc>-<integ>-<dhgroup>!",
			"Type": "String",
			"Default": "aes128-sha1-modp1024!"
			},
		"EspLifetime": {
			"Description": "IPSEC lifetime. You can define it in days (d), hours (h), minutes (m), seconds (s)",
			"Type": "String",
			"Default": "1h"
			},
			
		"Margin" : {
			"Description": "Soft-lifetime in minutes. Specify as <integer>m",
			"Type": "String",
			"Default": "5m"
			},
		"Fuzz": {
			"Description": "Rekey-fuzz value. The deployed CGW may have several VPNs on it, so 25% randomization is recommended in that case",
			"Type": "String",
			"Default": "50%"
			}
	},
	
	"Mappings": {
		"RegionMap": {
			"us-east-1": {
				"Strongswan": "ami-14c5486b"
			},
			"us-west-1": {
				"Strongswan": "ami-25110f45"
			},
			"us-west-2": {
				"Strongswan": "ami-e251209a"
			},
			"eu-west-1": {
				"Strongswan": "ami-ca0135b3"
			},
			"eu-west-2": {
				"Strongswan": "ami-a36f8dc4"
			},
			"eu-west-3": {
				"Strongswan": "ami-969c2deb"
			},
			"us-east-2": {
				"Strongswan": "ami-922914f7"
			},
			"ap-southeast-1": {
				"Strongswan": "ami-de90a5a2"
			},
			"ap-southeast-2": {
				"Strongswan": "ami-423bec20"
			},
			"ap-northeast-1": {
				"Strongswan": "ami-92df37ed"
			},
			"ap-northeast-2": {
				"Strongswan": "ami-c10fa6af"
			},
			"ap-northeast-3": {
				"Strongswan": "ami-b4faf4c9"
			},
			"sa-east-1": {
				"Strongswan": "ami-3885d854"
			},
			"eu-central-1": {
				"Strongswan": "ami-9a91b371"
			},
			"ca-central-1": {
				"Strongswan": "ami-338a0a57"
			},
			"ap-south-1": {
				"Strongswan": "ami-76d6f519"
			}

		}
},
	
"Resources":{
		"CgwVpc": {
		   "Type" : "AWS::EC2::VPC",
		   "Properties" : {
			  "CidrBlock" : {"Ref":"VpcCidr"},
			  "Tags" : [ {
						  "Key" : "Name",
						  "Value" : "CGWTestVpc"
						}]
		   }
		},
		"CgwSubnet": {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"CidrBlock" : {"Ref":"SubnetCidr"},
				"Tags" : [ {
						  "Key" : "Name",
						  "Value" : "CGWTestSubnet"
						}],
				"VpcId" : {"Ref": "CgwVpc"}
			}
		},
		"CgwSecurityGroup": {
		  "Type" : "AWS::EC2::SecurityGroup",
		  "Properties" : {
				 "GroupName" : "CGWTestingSG",
				 "GroupDescription" : "SG used by CGW",
				 "SecurityGroupIngress" : [ {
										  "CidrIp" : "0.0.0.0/0",
										  "Description" : "Rule to allow inbound IKE rekeys from VGW",
										  "FromPort" : 500,
										  "IpProtocol" : "udp",
										  "ToPort" : 500
										},
										{
										  "CidrIp" : "0.0.0.0/0",
										  "Description" : "Rule to allow inbound NAT-T from VGW",
										  "FromPort" : 4500,
										  "IpProtocol" : "udp",
										  "ToPort" : 4500
										},
										{
										  "CidrIp" : {"Ref":"SshSource"},
										  "Description" : "Rule to allow inbound IKE rekeys from VGW",
										  "FromPort" : 22,
										  "IpProtocol" : "tcp",
										  "ToPort" : 22
										}
										],
				 "Tags" :  [{
						  "Key" : "Name",
						  "Value" : "CGWTestSubnet"
						}],
				 "VpcId" : {"Ref":"CgwVpc"}
		  }
		},
		"CgwInternetGw":{
			"Type" : "AWS::EC2::InternetGateway"
		},
		"CgwIgwAttachment":{
		   "Type" : "AWS::EC2::VPCGatewayAttachment",
		   "Properties": {
				"InternetGatewayId": {"Ref":"CgwInternetGw"},
				"VpcId":{"Ref":"CgwVpc"}
				}
		},
		"CgwRouteTable":{
		   "Type" : "AWS::EC2::RouteTable",
		   "Properties" : {
			  "VpcId" : {"Ref":"CgwVpc"},
			  "Tags" : [ {
						  "Key" : "Name",
						  "Value" : "CGWTestRouteTable"
						}]
		   }
		},
		"CgwRoute":{
		  "Type" : "AWS::EC2::Route",
		  "Properties" : {
			"DestinationCidrBlock" : "0.0.0.0/0",
			"GatewayId" : {"Ref":"CgwInternetGw"},
			"RouteTableId" : {"Ref": "CgwRouteTable"}
		  }
		},
		"CgwRouteTableAssoc":{
		  "Type" : "AWS::EC2::SubnetRouteTableAssociation",
		  "Properties" : {
			"RouteTableId" : {"Ref":"CgwRouteTable"},
			"SubnetId" : {"Ref":"CgwSubnet"}
		  }
		},     
	
		"CgwEip":{
		   "Type" : "AWS::EC2::EIP",
		   "Properties" : {
				"Domain": "vpc"
				}
		},
		"CgwEipAssociate":{
		   "Type": "AWS::EC2::EIPAssociation",
		   "Properties": {
			  "InstanceId": {"Ref":"CgwEc2"},
			  "AllocationId": {"Fn::GetAtt" : [ "CgwEip","AllocationId"]}
		   }
		},
		
		"CgwIamPolicy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [{
						"Ref": "CgwIamRole"
					}
				],
				"PolicyName": "CgwAPIaccess",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Action": [
								"ec2:CreateVpnConnection",
								"ec2:CreateCustomerGateway",
								"ec2:CreateVpnConnectionRoute",
								"ec2:DescribeCustomerGateways",
								"ec2:DescribeTransitGateways",
								"ec2:DescribeVpnConnections",
								"ec2:DescribeVpnGateways",
								"ec2:DescribeRegions",
								"ec2:DeleteVpnConnection",
								"ec2:DeleteVpnConnectionRoute",
								"ec2:DeleteCustomerGateway",
								"cloudformation:CreateStack",
								"cloudformation:DescribeStackResources",
								"cloudformation:DescribeStackResource"
							],
							"Resource": "*"
						}
					]

				}
			}
		},
		"CgwIamRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Principal": {
								"Service": "ec2.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"Path": "/"
			}
		},
		"CgwInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
						"Ref": "CgwIamRole"
					}
				]
			}
		},
		
		"CgwEc2":{
			"Type" : "AWS::EC2::Instance",
			"DependsOn": "CgwIgwAttachment",
			"Metadata" : {
			     "AWS::CloudFormation::Init" : {
					"config" : {
						"packages": {
							"yum": {
								"strongswan": [],
								"quagga": []
								}
							},
						"files":{
							"/etc/cfn/cfn-hup.conf" : {
							  "content" : { "Fn::Join" : ["", [
								"[main]\n",
								"stack=", { "Ref" : "AWS::StackName" }, "\n",
								"region=", { "Ref" : "AWS::Region" }, "\n",
								"interval=1\n",
								"role=", { "Ref" : "CgwIamRole"}, "\n"
							  ]]},
							  "mode"  : "000400",
							  "owner"   : "root",
							  "group"   : "root"
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
							  "content": { "Fn::Join" : ["", [
								"[cfn-auto-reloader-hook]\n",
								"triggers=post.update\n",
								"path=Resources.CgwEc2.Metadata.AWS::CloudFormation::Init\n",
								"action=/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r CgwEc2 ",
								" --region ", { "Ref" : "AWS::Region" }, "\n",  
								"runas=root\n"
							  ]]}
							},
							"/etc/quagga/bgpd.conf" : {
							  "content": { "Fn::Join": ["", [
							  "log file /var/log/quagga/bgpd\n",
							  "router bgp ",{"Ref":"Asn"},"\n",
							  "\tnetwork ",{"Ref":"VpcCidr"},"\n"
							  ]]}
							},
							"/etc/quagga/daemons": {
							  "content": { "Fn::Join": ["", [
							  "zebra=yes\n",
							  "bgpd=yes\n",
							  "ospfd=no\n",
							  "ospf6d=no\n",
							  "ripd=no\n",
							  "ripngd=no\n"
							]]}
							},
							"/etc/strongswan/configure.py":{
							 "source": "https://raw.githubusercontent.com/secureoptions/cgw-testing/master/configure.py",
							 "mode": "000755"
							},
							"/etc/strongswan/aws.updown":{
							 "source": "https://raw.githubusercontent.com/secureoptions/cgw-testing/master/aws.updown",
							 "mode": "000755"
							}
							},
						"commands":{
							"AA": {
								"command": "rm -f /etc/strongswan/swvars.py"
								},
							"BSN":{
								"command": "echo ASN=\"$ASN\" >> /etc/strongswan/swvars.py",
								"env": { "ASN": {"Ref": "Asn"}}
							},
							"BGWS":{
								"command": "echo VGWS=\"'$VGWS'\" >> /etc/strongswan/swvars.py",
								"env": { "VGWS": {"Ref": "Vgws"}}
							},
							"CIP":{
								"command": "echo EIP=\"'$EIP'\" >> /etc/strongswan/swvars.py",
								"env": { "EIP": {"Ref": "CgwEip"}}
							},
							"IKEVERSION": {
								"command" : "echo IKEVERSION=\"'$IKEVERSION'\" >> /etc/strongswan/swvars.py",
								"env": { "IKEVERSION": {"Ref": "IkeVersion"}}
							},
							"IKEPARAMETERS": {
								"command" : "echo IKEPARAMETERS=\"'$IKEPARAMETERS'\" >> /etc/strongswan/swvars.py",
								"env": { "IKEPARAMETERS": {"Ref": "IkeParameters"}}
							},
							"IKELIFETIME": {
								"command" : "echo IKELIFETIME=\"'$IKELIFETIME'\" >> /etc/strongswan/swvars.py",
								"env": { "IKELIFETIME": {"Ref": "IkeLifetime"}}
							},
							"ESPPARAMETERS": {
								"command" : "echo ESPPARAMETERS=\"'$ESPPARAMETERS'\" >> /etc/strongswan/swvars.py",
								"env": { "ESPPARAMETERS": {"Ref": "EspParameters"}}
							},
							"ESPLIFETIME": {
								"command" : "echo ESPLIFETIME=\"'$ESPLIFETIME'\" >> /etc/strongswan/swvars.py",
								"env": { "ESPLIFETIME": {"Ref": "EspLifetime"}}
							},
							"MARGIN": {
								"command" : "echo MARGIN=\"'$MARGIN'\" >> /etc/strongswan/swvars.py",
								"env": { "MARGIN": {"Ref": "Margin"}}
							},
							"FUZZ": {
								"command" : "echo FUZZ=\"'$FUZZ'\" >> /etc/strongswan/swvars.py",
								"env": { "FUZZ": {"Ref": "Fuzz"}}
							},
							"LOCAL_ROUTES":{
								"command": "echo LOCAL_ROUTES=\"'$LOCAL_ROUTES'\" >> /etc/strongswan/swvars.py",
								"env": { "LOCAL_ROUTES": {"Ref": "VpcCidr"}}
							},
							"STARTA": {
								"command": "/usr/bin/python /etc/strongswan/configure.py"
							},
							"STARTZ": {
								"command": "/opt/aws/bin/cfn-hup --verbose"
							}
						}
				}
			}
		},
					
					
		"Properties":{	
			  "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Strongswan" ]},
			  "InstanceType" : {"Ref":"Type"},
			  "KeyName" : {"Ref": "SshKey"},
			  "Monitoring" : "True",
			  "IamInstanceProfile" : {"Ref": "CgwInstanceProfile"},
			  "NetworkInterfaces": [ {
				  "AssociatePublicIpAddress": "true",
				  "DeviceIndex": "0",
				  "GroupSet": [{ "Ref" : "CgwSecurityGroup" }],
				  "SubnetId": { "Ref" : "CgwSubnet" }
				} ],
			  "SourceDestCheck" : "False",
			  "Tags" : [ {
						  "Key" : "Name",
						  "Value" : "Strongswan-CGW"
						} ],
			  "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
				 "#!/bin/bash -xe\n",
				 "yum-config-manager --enable epel\n",
				 "pip install boto3\n",
				 "# Install the files and packages from the metadata\n",
				 "/opt/aws/bin/cfn-init -v ",
				 "         --stack ", { "Ref" : "AWS::StackName" },
				 "         --resource CgwEc2 ",
				 "         --region ", { "Ref" : "AWS::Region" }, "\n"
			]]}}
		}
      }
    }
 }
